#
# SPDX-License-Identifier: MIT
#
# Copyright (C) 2025 Daniel Bourdrez. All Rights Reserved.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree or at
# https://spdx.org/licenses/MIT.html
#

name: SLSA Build Level 4 Provenance and GitHub Artifact Attestations

on:
  workflow_call:
    inputs:
      create_release:
        type: boolean
        required: false
        default: true
      dry_run:
        type: boolean
        required: false
        default: false
      sign_blobs:
        type: boolean
        required: false
        default: true
      extended_metadata:
        description: 'Generate extended metadata (full per-file manifest + full commit metadata)'
        type: boolean
        required: false
        default: false

permissions: {}

concurrency:
  group: release-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  package_source:
    # Hermetic packaging job: runs offline in the pinned Go toolchain container.
    name: Package hermetic source
    if: ${{ inputs.dry_run || github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    # Fully containerize to ensure hermetic, consistent environment.
    container:
      image: golang:1.25-bookworm@sha256:51b6b12427dc03451c24f7fc996c43a20e8a8e56f0849dd0db6ff6e9225cc892
    permissions:
      actions: read
      contents: read
    outputs:
      artifact_filename: ${{ steps.package.outputs.artifact_filename }}
      artifact_sha256: ${{ steps.package.outputs.artifact_sha256 }}
      subjects_b64:  ${{ steps.package.outputs.subjects_b64 }}
      artifact_path: ${{ steps.package.outputs.artifact_path }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            pkg-containers.githubusercontent.com:443
            pipelines.actions.githubusercontent.com:443
            artifactcache.actions.githubusercontent.com:443

      - name: Checkout repo
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - id: package
        name: Package reproducible source
        uses: ./.github/actions/package
        with:
          extended_metadata: ${{ inputs.extended_metadata }}
        env:
          # Persist the builder digest so build.env captures it for downstream verification.
          SLSA_BUILDER_IMAGE: golang:1.25-bookworm@sha256:42d8e9dea06f23d0bfc908826455213ee7f3ed48c43e287a422064220c501be9

      - name: Upload packaging bundle
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50
        with:
          name: package-${{ steps.package.outputs.artifact_filename }}
          retention-days: 7
          if-no-files-found: error
          path: |
            ${{ steps.package.outputs.artifact_path }}
            subjects.sha256
            checksums.txt
            manifest.files.sha256
            commit.metadata
            build.env
            verification.json

  sbom_and_release:
    # Networked follow-up job: consumes packaging artifacts, generates SBOM/attestations.
    name: SBOM + Attest + Publish
    needs: package_source
    if: ${{ inputs.dry_run || github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    container:
      image: golang:1.25-bookworm@sha256:51b6b12427dc03451c24f7fc996c43a20e8a8e56f0849dd0db6ff6e9225cc892
    permissions:
      actions: read
      attestations: write
      contents: write
      id-token: write
      security-events: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            pkg-containers.githubusercontent.com:443
            uploads.github.com:443
            release-assets.githubusercontent.com:443
            artifactcache.actions.githubusercontent.com:443
            pipelines.actions.githubusercontent.com:443
            fulcio.sigstore.dev:443
            rekor.sigstore.dev:443
            tuf-repo-cdn.sigstore.dev:443
            ctfe.sigstore.dev:443
            oauth2.sigstore.dev:443
            proxy.golang.org:443
            sum.golang.org:443
            storage.googleapis.com:443

      - name: Checkout repo
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Download packaging bundle
        uses: actions/download-artifact@4a24838f3d5601fd639834081e118c2995d51e1c
        with:
          name: package-${{ needs.package_source.outputs.artifact_filename }}
          path: package

      - name: Prepare artifact paths
        id: paths
        run: |
          TAR="package/${{ needs.package_source.outputs.artifact_path }}"
          {
            echo "artifact_path=${TAR}"
            echo "subjects_path=package/subjects.sha256"
            echo "checksums_path=package/checksums.txt"
            echo "manifest_path=package/manifest.files.sha256"
            echo "metadata_path=package/verification.json"
          } >> "$GITHUB_OUTPUT"

      - name: Install cosign (pinned)
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        env:
          COSIGN_VERSION: v2.4.0
          COSIGN_SHA256: cd7636b3586a3bdac2d9c8f3b421ed119edcb20499107887fd929211110e8418
        run: |
          set -euo pipefail
          curl -sSLo cosign "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
          echo "${COSIGN_SHA256}  cosign" | sha256sum -c -
          install -m 0755 cosign /usr/local/bin/cosign

      - name: Generate CycloneDX SBOM (for Go modules)
        uses: CycloneDX/gh-gomod-generate-sbom@171199f37bbd0f611db19484319e87d2ee441f97
        with:
          version: 1
          args: mod -licenses -json -output sbom.cdx.json .

      - name: Attest SBOM (bind SBOM to tarball digest)
        if: ${{ !inputs.dry_run }}
        uses: actions/attest-sbom@580d4aff2154158e1f746a6ad674799329ccfad1
        with:
          subject-checksums: ${{ steps.paths.outputs.subjects_path }}
          sbom-path: sbom.cdx.json

      - name: Attest build provenance (GitHub native)
        if: ${{ !inputs.dry_run }}
        uses: actions/attest-build-provenance@ba965ac88abfc6fa49344893ed19e5bf479a07d6
        with:
          subject-path: ${{ steps.paths.outputs.artifact_path }}

      - id: sign
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        name: Cosign sign source artifact
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          ART_PATH='${{ steps.paths.outputs.artifact_path }}'
          cosign sign-blob --yes --bundle "${ART_PATH}.bundle" "${ART_PATH}"
          echo "bundle_file=${ART_PATH}.bundle" >> "$GITHUB_OUTPUT"

      - name: Cosign sign SBOM
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          cosign sign-blob --yes --bundle sbom.cdx.json.bundle sbom.cdx.json

      - name: Cosign sign checksums manifest
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          cosign sign-blob --yes --bundle package/checksums.txt.bundle package/checksums.txt

      - name: Create/Update GitHub Release
        if: ${{ !inputs.dry_run && inputs.create_release }}
        uses: softprops/action-gh-release@5434409c2b6457c050f109d68b2547fcbf1db07b
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            ${{ steps.paths.outputs.artifact_path }}
            ${{ steps.sign.outputs.bundle_file }}
            sbom.cdx.json
            sbom.cdx.json.bundle
            package/checksums.txt
            package/checksums.txt.bundle
            package/subjects.sha256
            package/manifest.files.sha256
            package/commit.metadata
            package/build.env
            scripts/package-source.sh
            package/verification.json

      - name: Upload artifacts (PR dry run)
        if: ${{ inputs.dry_run }}
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50
        with:
          name: dryrun-${{ needs.package_source.outputs.artifact_filename }}
          if-no-files-found: warn
          path: |
            ${{ steps.paths.outputs.artifact_path }}
            sbom.cdx.json
            package/subjects.sha256
            package/checksums.txt
            package/manifest.files.sha256
            package/commit.metadata
            package/build.env
            scripts/package-source.sh
            package/verification.json

  rebuild_verify:
    # Purpose: independently re-run packaging to assert determinism (SLSA Level 4).
    name: Rebuild & Verify Determinism
    if: ${{ github.ref_type == 'tag' && !inputs.dry_run }}
    needs: package_source
    runs-on: ubuntu-latest
    container:
      # Mirror the hermetic builder so the rebuild check uses identical bits.
      image: golang:1.25-bookworm@sha256:51b6b12427dc03451c24f7fc996c43a20e8a8e56f0849dd0db6ff6e9225cc892
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            pipelines.actions.githubusercontent.com:443

      - name: Checkout repo (fresh workspace)
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - id: repackage
        name: Re-run deterministic packaging
        uses: ./.github/actions/package
        with:
          extended_metadata: ${{ inputs.extended_metadata }}
        env:
          # The rebuild must mirror the original builder image to satisfy L4 reproducibility.
          SLSA_BUILDER_IMAGE: golang:1.25-bookworm@sha256:42d8e9dea06f23d0bfc908826455213ee7f3ed48c43e287a422064220c501be9

      - name: Compare digests
        # Fails fast if non-deterministic differences emerge.
        run: |
          set -euo pipefail
          orig='${{ needs.package_source.outputs.artifact_sha256 }}'
          new='${{ steps.repackage.outputs.artifact_sha256 }}'
          echo "Original digest: $orig"
          echo "Rebuilt  digest: $new"
          if [ "$orig" != "$new" ]; then
            echo 'Digest mismatch! Rebuild not deterministic.' >&2
            exit 1
          fi
          echo 'Rebuild determinism verified.'

  provenance_slsa:
    name: SLSA Build Level 4 Provenance
    if: ${{ !inputs.dry_run && github.ref_type == 'tag' }}
    needs: [package_source, rebuild_verify]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.package_source.outputs.subjects_b64 }}
      upload-assets: true
    permissions:
      actions: read
      id-token: write
      contents: write
