#
# SPDX-License-Identifier: MIT
#
# Copyright (C) 2025 Daniel Bourdrez. All Rights Reserved.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree or at
# https://spdx.org/licenses/MIT.html
#

name: SLSA Build Level 4 Provenance and GitHub Artifact Attestations

on:
  workflow_call:
    inputs:
      go-version:
        type: string
        required: false
        default: '1.25' # Use a specific version, not a range
      create_release:
        type: boolean
        required: false
        default: true
      dry_run:
        type: boolean
        required: false
        default: false
      sign_blobs:
        type: boolean
        required: false
        default: true
      extended_metadata:
        description: 'Generate extended metadata (full per-file manifest + full commit metadata)'
        type: boolean
        required: false
        default: false

permissions: {}

concurrency:
  group: release-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  package_and_sbom:
    name: Package source + SBOM + Attestations
    if: ${{ inputs.dry_run || github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    container:
      image: golang:${{ inputs.go-version }}-bookworm
    permissions:
      actions: read
      contents: write
      id-token: write
      attestations: write
      security-events: write
    outputs:
      artifact_path: ${{ steps.package.outputs.artifact_path }}
      artifact_filename: ${{ steps.package.outputs.artifact_filename }}
      subjects_b64:  ${{ steps.package.outputs.subjects_b64 }}
      artifact_sha256: ${{ steps.package.outputs.artifact_sha256 }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            fulcio.sigstore.dev:443
            rekor.sigstore.dev:443
            tuf-repo-cdn.sigstore.dev:443
            ctfe.sigstore.dev:443
            github.com:443
            release-assets.githubusercontent.com:443

      - name: Checkout repo
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          apt-get update -qq >/dev/null
          apt-get install -y -qq ca-certificates gzip wget >/dev/null

      - id: package
        name: Package reproducible source
        env:
          EXTENDED_METADATA: ${{ inputs.extended_metadata }}
        run: bash scripts/package-source.sh

      - name: Generate CycloneDX SBOM (for Go modules)
        uses: CycloneDX/gh-gomod-generate-sbom@171199f37bbd0f611db19484319e87d2ee441f97
        with:
          version: 1
          args: mod -licenses -json -output sbom.cdx.json .

      - name: Attest SBOM (bind SBOM to tarball digest)
        if: ${{ !inputs.dry_run }}
        # Produces an SBOM attestation referencing the digest in subjects.sha256 (integrity + authenticity).
        uses: actions/attest-sbom@4e404e709737cbaa2830f5ffb93a62340d5241a7
        with:
          subject-checksums: subjects.sha256
          sbom-path: sbom.cdx.json

      - name: Attest build provenance (GitHub native)
        if: ${{ !inputs.dry_run }}
        # Native provenance attestation attaches build recipe metadata (OIDC-signed) to the artifact.
        uses: actions/attest-build-provenance@3752c92e3bd95a40782ebef53ea5f91088c20e48
        with:
          subject-path: ${{ steps.package.outputs.artifact_path }}

      - name: Install cosign (keyless)
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        # Cosign used for direct blob signing of the tarball (signature + cert) â€” public transparency logs via Fulcio/Rekor.
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62

      - id: sign
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        name: Cosign sign source artifact
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          ART_PATH='${{ steps.package.outputs.artifact_path }}'
          cosign sign-blob --yes --bundle "${ART_PATH}.bundle" "${ART_PATH}"
          echo "bundle_file=${ART_PATH}.bundle" >> "$GITHUB_OUTPUT"

      - name: Cosign sign SBOM
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          cosign sign-blob --yes --bundle sbom.cdx.json.bundle sbom.cdx.json

      - name: Cosign sign checksums manifest
        if: ${{ !inputs.dry_run && inputs.sign_blobs }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          cosign sign-blob --yes --bundle checksums.txt.bundle checksums.txt

      - name: Create/Update GitHub Release
        if: ${{ !inputs.dry_run && inputs.create_release }}
        uses: softprops/action-gh-release@62c96d0c4e8a889135c1f3a25910db8dbe0e85f7
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            ${{ steps.package.outputs.artifact_path }}
            ${{ steps.sign.outputs.bundle_file }}
            sbom.cdx.json
            sbom.cdx.json.bundle
            checksums.txt
            checksums.txt.bundle
            subjects.sha256
            manifest.files.sha256
            commit.metadata
            build.env
            scripts/package-source.sh
            verification.json

      - name: Upload artifacts (PR dry run)
        if: ${{ inputs.dry_run }}
        # For pull requests: surface artifacts for inspection without publishing a release.
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50
        with:
            name: dryrun-${{ steps.package.outputs.artifact_filename }}
            path: |
              ${{ steps.package.outputs.artifact_path }}
              sbom.cdx.json
              subjects.sha256
              checksums.txt
              manifest.files.sha256
              commit.metadata
              build.env
              scripts/package-source.sh
              verification.json

  rebuild_verify:
    # Purpose: independently re-run packaging to assert determinism (SLSA Level 4).
    name: Rebuild & Verify Determinism
    if: ${{ github.ref_type == 'tag' && !inputs.dry_run }}
    needs: package_and_sbom
    runs-on: ubuntu-latest
    container:
      image: golang:${{ needs.package_and_sbom.inputs.go-version }}-bookworm
    permissions:
      contents: read
    steps:
      - name: Checkout repo (fresh workspace)
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0
      - id: repackage
        name: Re-run deterministic packaging
        uses: ./.github/actions/package
        env:
          # Explicitly set required naming vars to mirror original job context.
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_REF_TYPE: tag
          GITHUB_RUN_NUMBER: 0
      - name: Compare digests
        # Fails fast if non-deterministic differences emerge.
        run: |
          set -euo pipefail
          orig='${{ needs.package_and_sbom.outputs.artifact_sha256 }}'
          new='${{ steps.repackage.outputs.artifact_sha256 }}'
          echo "Original digest: $orig"
          echo "Rebuilt  digest: $new"
          if [ "$orig" != "$new" ]; then
            echo 'Digest mismatch! Rebuild not deterministic.' >&2
            exit 1
          fi
          echo 'Rebuild determinism verified.'

  provenance_slsa:
    name: SLSA Build Level 4 Provenance
    if: ${{ !inputs.dry_run && github.ref_type == 'tag' }}
    needs: [package_and_sbom, rebuild_verify]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.package_and_sbom.outputs.subjects_b64 }}
      upload-assets: true
    permissions:
      actions: read
      id-token: write
      contents: write